// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(USER)
  avatar    String?
  isActive  Boolean  @default(true)
  isEmailVerified Boolean @default(false)
  emailVerificationToken String?
  resetPasswordToken String?
  resetPasswordExpires DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  contents    Content[]
  comments    Comment[]
  likes       Like[]
  profile     Profile?

  @@map("users")
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?
  website     String?
  socialLinks Json? // Store social media links as JSON
  preferences Json? // Store user preferences as JSON
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Content {
  id          String   @id @default(cuid())
  title       String
  description String?
  keywords    String? // Comma-separated keywords
  subject     String?
  transcript  String
  editedTranscript String?
  audioUrl    String
  audioDuration Int? // Duration in seconds
  isPublished Boolean @default(false)
  isPublic    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId    String
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     Like[]

  @@map("contents")
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  contentId String
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  contentId String
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId])
  @@map("likes")
}

enum UserRole {
  ADMIN
  PUBLISHER
  EDITOR
  USER
}
